#import <Foundation/Foundation.h>
#import "SWGEventLog.h"
#import "SWGIAMIN.h"
#import "SWGInlineResponse2002.h"
#import "SWGInlineResponse2003.h"
#import "SWGInlineResponse2005.h"
#import "SWGMainEventStats.h"
#import "SWGPRRepresentative.h"
#import "SWGTicket.h"
#import "SWGApi.h"

/**
* IAMIN API
* API Backend for the IAMIN App
*
* OpenAPI spec version: 1.0.0
* Contact: sanket@blackcurrantapps.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGPRApi: NSObject <SWGApi>

extern NSString* kSWGPRApiErrorDomain;
extern NSInteger kSWGPRApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Check in User
/// 
///
/// @param email 
/// @param eventId 
/// @param quantity 
/// 
///  code:200 message:"OK"
///
/// @return SWGEventLog*
-(NSURLSessionTask*) prCheckInByEmailWithEmail: (NSString*) email
    eventId: (NSNumber*) eventId
    quantity: (NSNumber*) quantity
    completionHandler: (void (^)(SWGEventLog* output, NSError* error)) handler;


/// Check in User
/// 
///
/// @param ticketID 
/// @param quantity 
/// 
///  code:200 message:"OK"
///
/// @return SWGEventLog*
-(NSURLSessionTask*) prCheckInByTicketIdWithTicketID: (NSNumber*) ticketID
    quantity: (NSNumber*) quantity
    completionHandler: (void (^)(SWGEventLog* output, NSError* error)) handler;


/// get Events
/// 
///
/// @param mainEventID 
/// 
///  code:200 message:"OK"
///
/// @return SWGInlineResponse2002*
-(NSURLSessionTask*) prGetEventListWithMainEventID: (NSNumber*) mainEventID
    completionHandler: (void (^)(SWGInlineResponse2002* output, NSError* error)) handler;


/// get History
/// 
///
/// @param maineventId 
/// 
///  code:200 message:"OK"
///
/// @return SWGInlineResponse2005*
-(NSURLSessionTask*) prGetHistoryWithMaineventId: (NSNumber*) maineventId
    completionHandler: (void (^)(SWGInlineResponse2005* output, NSError* error)) handler;


/// get IAMIN
/// 
///
/// @param iaminId 
/// 
///  code:200 message:"OK"
///
/// @return SWGIAMIN*
-(NSURLSessionTask*) prGetIAMINWithIaminId: (NSNumber*) iaminId
    completionHandler: (void (^)(SWGIAMIN* output, NSError* error)) handler;


/// get IAMINers for the main event sharing contacts
/// 
///
/// @param mainEventid 
/// 
///  code:200 message:"OK"
///
/// @return SWGInlineResponse2003*
-(NSURLSessionTask*) prGetIAMINersWithMainEventid: (NSNumber*) mainEventid
    completionHandler: (void (^)(SWGInlineResponse2003* output, NSError* error)) handler;


/// get IAMIN
/// 
///
/// @param email 
/// @param eventId 
/// @param cellNo 
/// 
///  code:200 message:"OK"
///
/// @return SWGIAMIN*
-(NSURLSessionTask*) prGetIaminByEmailWithEmail: (NSString*) email
    eventId: (NSNumber*) eventId
    cellNo: (NSString*) cellNo
    completionHandler: (void (^)(SWGIAMIN* output, NSError* error)) handler;


/// get Self Profile
/// 
///
/// @param mainEventid 
/// 
///  code:200 message:"OK"
///
/// @return SWGPRRepresentative*
-(NSURLSessionTask*) prGetPRRepresentativeWithMainEventid: (NSNumber*) mainEventid
    completionHandler: (void (^)(SWGPRRepresentative* output, NSError* error)) handler;


/// get Stats
/// 
///
/// @param mainEventId 
/// 
///  code:200 message:"OK"
///
/// @return SWGMainEventStats*
-(NSURLSessionTask*) prGetStatsWithMainEventId: (NSNumber*) mainEventId
    completionHandler: (void (^)(SWGMainEventStats* output, NSError* error)) handler;


/// get Ticket
/// 
///
/// @param ticketID 
/// 
///  code:200 message:"OK"
///
/// @return SWGTicket*
-(NSURLSessionTask*) prGetTicketByIdWithTicketID: (NSNumber*) ticketID
    completionHandler: (void (^)(SWGTicket* output, NSError* error)) handler;


/// give Ticket
/// 
///
/// @param email 
/// @param eventId 
/// @param quantity 
/// @param cellNo 
/// @param remark 
/// 
///  code:200 message:"OK"
///
/// @return SWGTicket*
-(NSURLSessionTask*) prGiveTicketByEmailAndCellWithEmail: (NSString*) email
    eventId: (NSNumber*) eventId
    quantity: (NSNumber*) quantity
    cellNo: (NSString*) cellNo
    remark: (NSString*) remark
    completionHandler: (void (^)(SWGTicket* output, NSError* error)) handler;


/// give Ticket
/// 
///
/// @param iaminId 
/// @param quantity 
/// @param remark 
/// 
///  code:200 message:"OK"
///
/// @return SWGTicket*
-(NSURLSessionTask*) prGiveTicketbyIaminIdWithIaminId: (NSNumber*) iaminId
    quantity: (NSNumber*) quantity
    remark: (NSString*) remark
    completionHandler: (void (^)(SWGTicket* output, NSError* error)) handler;


/// update location shown on the map to buyers
/// 
///
/// @param lat 
/// @param lon 
/// 
///  code:200 message:"OK"
///
/// @return SWGPRRepresentative*
-(NSURLSessionTask*) prUpdateLocationWithLat: (NSNumber*) lat
    lon: (NSNumber*) lon
    completionHandler: (void (^)(SWGPRRepresentative* output, NSError* error)) handler;



@end
