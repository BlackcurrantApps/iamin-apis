#import <Foundation/Foundation.h>
#import "SWGCandidate.h"
#import "SWGEvent.h"
#import "SWGIAMIN.h"
#import "SWGInlineResponse2003.h"
#import "SWGInlineResponse2004.h"
#import "SWGInlineResponse2005.h"
#import "SWGInlineResponse2007.h"
#import "SWGMainEventStats.h"
#import "SWGApi.h"

/**
* IAMIN API
* API Backend for the IAMIN App
*
* OpenAPI spec version: 1.0.0
* Contact: sanket@blackcurrantapps.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGEventHeadApi: NSObject <SWGApi>

extern NSString* kSWGEventHeadApiErrorDomain;
extern NSInteger kSWGEventHeadApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a voting candidate
/// 
///
/// @param eventId 
/// @param name 
/// 
///  code:200 message:"OK"
///
/// @return SWGCandidate*
-(NSURLSessionTask*) ehAddVotingCandidateWithEventId: (NSNumber*) eventId
    name: (NSString*) name
    completionHandler: (void (^)(SWGCandidate* output, NSError* error)) handler;


/// send anouncement to everyone
/// 
///
/// @param eventId 
/// @param message 
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) ehAnnounceAllWithEventId: (NSNumber*) eventId
    message: (NSString*) message
    completionHandler: (void (^)(NSError* error)) handler;


/// send anouncement to iaminers
/// 
///
/// @param eventId 
/// @param message 
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) ehAnnounceIAMINersWithEventId: (NSNumber*) eventId
    message: (NSString*) message
    completionHandler: (void (^)(NSError* error)) handler;


/// send anouncement to tickey holders
/// 
///
/// @param eventId 
/// @param message 
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) ehAnnounceTicketHoldersWithEventId: (NSNumber*) eventId
    message: (NSString*) message
    completionHandler: (void (^)(NSError* error)) handler;


/// Disable Voting
/// 
///
/// @param eventId 
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) ehDisableVotingWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(NSError* error)) handler;


/// Edit Event
/// 
///
/// @param event 
/// 
///  code:200 message:"OK"
///
/// @return SWGEvent*
-(NSURLSessionTask*) ehEditEventWithEvent: (SWGEvent*) event
    completionHandler: (void (^)(SWGEvent* output, NSError* error)) handler;


/// Enable Voting
/// 
///
/// @param eventId 
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) ehEnableVotingWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(NSError* error)) handler;


/// give Ticket to iaminer
/// 
///
/// @param iAMIN 
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) ehFreeUpgradeIAMINERWithIAMIN: (SWGIAMIN*) iAMIN
    completionHandler: (void (^)(NSError* error)) handler;


/// get Event
/// 
///
/// @param eventId 
/// 
///  code:200 message:"OK"
///
/// @return SWGEvent*
-(NSURLSessionTask*) ehGetEventWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(SWGEvent* output, NSError* error)) handler;


/// get IAMINers
/// 
///
/// @param eventId 
/// 
///  code:200 message:"OK"
///
/// @return SWGInlineResponse2003*
-(NSURLSessionTask*) ehGetIAMINersWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(SWGInlineResponse2003* output, NSError* error)) handler;


/// get Event
/// 
///
/// @param eventId 
/// 
///  code:200 message:"OK"
///
/// @return SWGMainEventStats*
-(NSURLSessionTask*) ehGetStatsWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(SWGMainEventStats* output, NSError* error)) handler;


/// get Ticket holders for this event
/// 
///
/// @param eventId 
/// 
///  code:200 message:"OK"
///
/// @return SWGInlineResponse2004*
-(NSURLSessionTask*) ehGetTicketHoldersWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(SWGInlineResponse2004* output, NSError* error)) handler;


/// get Voting Candidates
/// 
///
/// @param eventID 
/// 
///  code:200 message:"OK"
///
/// @return SWGInlineResponse2007*
-(NSURLSessionTask*) ehGetVotingCandidatesWithEventID: (NSNumber*) eventID
    completionHandler: (void (^)(SWGInlineResponse2007* output, NSError* error)) handler;


/// Remove a voting candidate
/// 
///
/// @param eventId 
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) ehRemoveAllCandidatesAndResetVotingWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(NSError* error)) handler;


/// Remove a voting candidate
/// 
///
/// @param eventId 
/// @param candidateId 
/// 
///  code:200 message:"OK"
///
/// @return void
-(NSURLSessionTask*) ehRemoveVotingCandidateWithEventId: (NSNumber*) eventId
    candidateId: (NSNumber*) candidateId
    completionHandler: (void (^)(NSError* error)) handler;


/// get History
/// 
///
/// @param eventId 
/// 
///  code:200 message:"OK"
///
/// @return SWGInlineResponse2005*
-(NSURLSessionTask*) ehgetHistoryWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(SWGInlineResponse2005* output, NSError* error)) handler;



@end
